#!/usr/bin/env python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca> 
# File: orb-subtractv

## Copyright (c) 2010-2016 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORB
##
## ORB is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORB is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORB.  If not, see <http://www.gnu.org/licenses/>.


import sys, os
from argparse import ArgumentParser
import argparse

import orb.utils.io
###
###


def main(args):


    vector = orb.utils.io.read_fits(args.vector_path)

    if '.hdf5' in args.input_cube_path:
        raise Exception('HDF5 cube subtraction not implemented yet')

    elif '.fits' in args.input_cube_path:
       
        
        output_path = os.path.splitext(
            os.path.split(args.input_cube_path)[1])[0] + '.sub.fits'

        cube, hdr = orb.utils.io.read_fits(
            args.input_cube_path,
            return_header=True)

        if cube.shape[2] != vector.shape[0]:
            raise Exception('Vector must have a length of {}'.format(cube.shape[2]))
        
        cube = (cube - vector)

        orb.utils.io.write_fits(output_path, cube, fits_header=hdr, overwrite=True)

    else: raise Exception('Cube must a FITS or HDF5 file')
       




if __name__ == "__main__":

    parser = ArgumentParser(
    	   description="Subtract a vector (e.g. a sky spectrum) from a cube.")
    
    parser.add_argument('input_cube_path', help='Path to a FITS/HDF5 cube.')

    parser.add_argument('vector_path', help='Path to a FITS vector.')

    args = parser.parse_args()

    main(args)
