#!/usr/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>
# File: orb-dstack

## Copyright (c) 2010-2014 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORB
##
## ORB is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORB is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORB.  If not, see <http://www.gnu.org/licenses/>.

#############################################
############ DSTACK script ##################
#############################################

# This script helps the user to stack a set of frames in a cube. A
# list of frames path must be given. List files created by ORBS can be
# used. Custom lists can be created using the command:
# 'ls /path/to/file/*.fits > list'

from orb.core import Cube, Tools
import orb.core

import sys, os
from optparse import OptionParser


MAX_QUAD_INDEX = Cube('').QUAD_NB - 1

tools = Tools(no_log=True)



def main(options, args):
    

    def filter_files(file_list, file_type):
        ending = file_type + '.fits'
        filtered_list = list()
        for ifile in file_list:
            if ending in ifile: filtered_list.append(ifile)
        return filtered_list
            

        
    path = args[0]
    cube_name = args[1]
    file_types = ['o', 'c', 'f']
    default_list_path = '.orb-dstack.list'
    
    if os.path.exists(path):
        if os.path.isdir(path):
            file_list = tools._create_list_from_dir(path, None)
            if options.file_type not in file_types:
                print 'file type must be in {}'.format(file_types)
                sys.exit(2)
            else:
                file_list = filter_files(file_list, options.file_type)
                with open(default_list_path, 'w') as f:
                    for ifile in file_list:
                        f.write(ifile + '\n')
                path = default_list_path
            
        cube = Cube(path, image_mode=options.mode,
                    chip_index=options.chip_index, binning=options.binning,
                    no_log=True)

        sz = cube.get_size_on_disk()
        if options.quadrant is not None:
            x_min, x_max, y_min, y_max = cube.get_quadrant_dims(
                options.quadrant)
            x_range = [x_min, x_max]
            y_range = [y_min, y_max]
            sz /= float(MAX_QUAD_INDEX + 1)
        else:
            x_range = None
            y_range = None

        

        print 'Expected size on disk: {} Mo'.format(sz)

        try:
            cube.export(cube_name, x_range=x_range, y_range=y_range,
                        fits_header=cube.get_cube_header(),
                        overwrite=options.overwrite)
        except MemoryError:
            print 'ERROR: Not enough memory ! try to create a smaller cube ...'
            sys.exit(2)
    else:
        print "List file does not exist"
        sys.exit(2)

       
if __name__ == "__main__":

    usage = "usage: %prog [options] list_of_images cube_name"
    parser = OptionParser(usage=usage,
                          version=('ORB-version {}'.format(
                              orb.core.__version__)),
                          description=
                          "Convert a list of FITS images or a folder into a data cube. The images must have the same shape.")
    
    parser.add_option('-m', "--mode", dest="mode", default='classic',
                      help="Image mode (can be sitelle or spiomm).")

    parser.add_option('-i', "--chip_index", dest="chip_index", default=1,
                      type=int, help="Chip index (in 'sitelle' mode only), can be 1 or 2.")

    parser.add_option('-b', "--binning", dest="binning", type=int,
                      help="Numerical binning along both axis.", default=1)
    
    parser.add_option('-q', "--quadrant", dest="quadrant", type=int,
                      help="Quadrant index from 0 to {} (the number of quadrants depends on the configuration option DIV_NB).".format(MAX_QUAD_INDEX),
                      default=None)

    parser.add_option('-t', "--type", dest="file_type", type=str,
                      help="File type (in 'sitelle' mode only): can be 'o' for object, 'c' for calibration  or 'f' for flats (object by default).",
                      default='o')

    parser.add_option('-o', "--overwrite", dest="overwrite",
                      action="store_true", default=False,
                      help="Overwrite destination file.")
    
    
    (options, args) = parser.parse_args()

    if len(args) < 2:
        parser.print_help()
        sys.exit(2)

    main(options, args)
