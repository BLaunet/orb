#!/usr/bin/env python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>
# File: orb-header

## Copyright (c) 2010-2016 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORB
##
## ORB is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORB is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORB.  If not, see <http://www.gnu.org/licenses/>.

#############################################
############ HEADER script ##################
#############################################

# This script helps the user to manipulate the header of a frame. 

import os, sys
import orb.core
from orb.core import Tools, HDFCube
import argparse
from argparse import ArgumentParser
import astropy.wcs as pywcs
import warnings


def main(args):
    
    warnings.filterwarnings(
                'ignore', message='Overwriting existing file.*',
                module='astropy.io.*')

    to = Tools()


    if os.path.isfile(args.fits_path):
        if (not 'fits' in args.fits_path) and (not 'hdf5' in args.fits_path):
            with open(args.fits_path, 'r') as f:
                fits_list = [filename for filename in f]
                fits_list = to.sort_image_list(fits_list, 'sitelle', cube=args.cube)
        else:
            fits_list = [args.fits_path]

        for fits_path in fits_list:

            if 'hdf5' in fits_path:
                cube = HDFCube(fits_path)
                if args.hdu_index + 1 > cube.dimz:
                    print ' > ERROR: given frame index is too high, file only contains {} frames'.format(cube.dimz)
                    sys.exit(2)
                file_type = 'hdf5'
                
            elif 'fits' in fits_path:
                hdulist = to.read_fits(fits_path, return_hdu_only=True,
                                       fix_header=False)
                if args.hdu_index + 1 > len(hdulist):
                    print ' > ERROR: given HDU index is too high, file only contains {} HDU'.format(len(hdulist))
                    hdulist.info()
                    sys.exit(2)
                    
                hdu = hdulist[args.hdu_index]
                file_type = 'fits'
                
            else:
                print ' > ERROR: bad formatted file. Must be a FITS or HDF5'
                sys.exit(2)
            
            if args.subparser_name == 'print':
                if file_type == 'fits':
                    print repr(hdu.header)
                if file_type == 'hdf5':
                    print repr(cube.get_cube_header())
                
            elif args.subparser_name == 'key':
                if file_type == 'fits':
                    vals = list()
                    for ikey in args.keyword:
                        if ikey in hdu.header:
                            vals.append(str(hdu.header[ikey]))
                        else:
                            vals.append('BAD_KEY_ERROR')
                    print '{} {}'.format(
                        os.path.abspath(fits_path).strip(),
                        ' '.join(vals))
                    
                        
                if file_type == 'hdf5':
                    if args.keyword in cube.get_cube_header():
                        print os.path.split(fits_path)[1].strip(), ' ', cube.get_cube_header()[args.keyword]
                    else:
                        print ' > ERROR: keyword {} does not exist.'.format(
                            args.keyword)
                        sys.exit(2)
                        
            elif args.subparser_name == 'del':
                if file_type == 'fits':
                    for ikey in args.keyword:
                        if ikey in hdu.header:
                            del hdu.header[ikey]
                        else:
                            print ' > WARNING: keyword {} does not exist.'.format(ikey)    
                    hdulist.writeto(fits_path, clobber=True)
                    
                        
                if file_type == 'hdf5':
                    with to.open_hdf5(fits_path, 'a') as f:
                        hdr = cube.get_cube_header()
                        for ikey in args.keyword:
                            if ikey in hdr:
                                del hdr[ikey]
                            else:
                                print ' > WARNING: keyword {} does not exist.'.format(ikey)    
                        del f[to._get_hdf5_header_path(args.hdu_index)]
                        f[to._get_hdf5_header_path(args.hdu_index)] = (
                            to._header_fits2hdf5(hdr))
                        
            elif args.subparser_name == 'info':
                hdulist.info()

            elif args.subparser_name == 'mod':
                if file_type == 'fits':
                    try:
                        value = int(args.value)
                    except ValueError:
                        try:
                            value = float(args.value)
                        except ValueError:
                            value = str(args.value)
                        
                    hdu.header[args.keyword] = value
                    hdulist.writeto(fits_path, clobber=True)
                else:
                    print ' > ERROR: Not implemented yet for HDF5.'.format(
                        args.keyword)
                    sys.exit(2)

            elif args.subparser_name == 'fix':
                if file_type == 'fits':
                    
                    wcs = pywcs.WCS(hdu.header, relax=False, fix=True)
                    wcs_header = wcs.to_header()
                    hdu.header.extend(wcs_header, update=True)
                    hdulist.writeto(fits_path, clobber=True, output_verify='fix')
                else:
                    print ' > ERROR: Not implemented yet for HDF5.'.format(
                        args.keyword)
                    sys.exit(2)
                    
        
    else:
        print " > ERROR: File {} does not exist.".format(args.fits_path)
       
if __name__ == "__main__":

    parser = ArgumentParser(version=('ORB-version {}'.format(
                              orb.core.__version__)),
                            description=
                            "Manipulate the header of a FITS/HDF5 file.")

    parser.add_argument('fits_path', help='Path to the FITS file')

    parser.add_argument('-i', dest="hdu_index", default=0, type=int,
                        help="Change HDU index (used only for FITS files)")

    parser.add_argument('--cube', dest="cube", default=False,
                        action='store_true', help="If image list is a cube sort list based on step number instead of filepath")
    
    subparsers = parser.add_subparsers(help='operation type', dest='subparser_name')

    parser_print = subparsers.add_parser('print', help='Print header content')

    parser_key = subparsers.add_parser('key', help='Print key value')

    parser_key.add_argument('keyword', help='Keyword to print', nargs='*')

    parser_del = subparsers.add_parser('del', help='Delete keyword (Warning: File will be overwritten)')
    
    parser_del.add_argument('keyword', help='Keyword to delete')

    parser_info = subparsers.add_parser('info', help='Print basic header info')

    parser_mod = subparsers.add_parser('mod', help='Change/Add keyword')

    parser_mod.add_argument('keyword', help='Keyword to Change/Add')

    parser_mod.add_argument('value', help='Value of the keyword')
    
    parser_mod = subparsers.add_parser('fix', help='Fix header and WCS')

    if len(sys.argv) < 2:
        parser.print_usage()
        sys.exit(2)
        
    args=parser.parse_args()
    
    main(args)
