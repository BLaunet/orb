#!/usr/bin/env python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca> 
# File: orb-extract

## Copyright (c) 2010-2016 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORB
##
## ORB is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORB is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORB.  If not, see <http://www.gnu.org/licenses/>.

import sys, os
from argparse import ArgumentParser
import argparse

from orb.core import Tools, HDFCube, OutHDFCube, ProgressBar
import orb

###########################################
### MAIN ##################################
###########################################
    
def main(args):
       
    if '.hdf5' in args.input_cube_path:
        
        cube = HDFCube(args.input_cube_path)

        if args.x == (None, None) and args.y == (None, None) and args.z == (None, None):
            raise Exception('At least one couple of coordinates must be given')
        
        if args.x == (None, None):
            args.x = (0, cube.dimx)
        if args.y == (None, None):
            args.y = (0, cube.dimy)
        if args.z == (None, None):
            args.z = (0, cube.dimz)
            
        hdr = cube.get_cube_header()
        if 'CRPIX1' in hdr:
            hdr['CRPIX1'] = hdr['CRPIX1'] - args.x[0]
        if 'CRPIX2' in hdr:
            hdr['CRPIX2'] = hdr['CRPIX2'] - args.y[0]
        if 'CRPIX3' in hdr:
            hdr['CRPIX3'] = hdr['CRPIX3'] - args.z[0]

            
        if '.fits' in args.output_cube_path:
            output_cube = cube[args.x[0]:args.x[1],
                               args.y[0]:args.y[1],
                               args.z[0]:args.z[1]]
            
            
            Tools().write_fits(
                args.output_cube_path, output_cube,
                overwrite=True,
                fits_header=hdr)
            
        else:
            raise Exception("Unrecognized output file extension must be '.fits'")
    else:
        raise Exception("Unrecognized output file extension must be '.hdf5'")
    

if __name__ == "__main__":

    parser = ArgumentParser(version=('ORB-version {}'.format(
        orb.core.__version__)),
                            description=
                            "Extract part of an HDF5 cube to a FITS file")
    
    parser.add_argument('input_cube_path', help='Path to an HDF5 cube.')

    parser.add_argument('output_cube_path', help='Path to a FITS cube.')

    parser.add_argument('-x', dest='x', help='xmin xmax', nargs=2, type=int, default=(None, None))
    
    parser.add_argument('-y', dest='y', help='ymin ymax', nargs=2, type=int, default=(None, None))
    
    parser.add_argument('-z', dest='z', help='zmin zmax', nargs=2, type=int, default=(None, None))
    
    args = parser.parse_args()

    main(args)
        

