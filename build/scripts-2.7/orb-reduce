#!/home/thomas/.virtualenvs/orb/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>
# File: orb-reduce

## Copyright (c) 2010-2016 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORB
##
## ORB is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORB is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORB.  If not, see <http://www.gnu.org/licenses/>.

#############################################
############ REDUCE script ##################
#############################################

# This script reduce the size of a spectral cube by removing zeros/NaNs frames.


import numpy as np
import sys, os
import getopt
from orb.core import Tools

def usage(): 
    print """usage: orb-reduce CUBE_NAME REDUCED_CUBE_NAME
    
    Reduce the size of a spectral cube by removing zeros/NaNs frames."""
  
    sys.exit(2)

def get_nm_axis(hdr):
    if ("NAXIS3" in hdr and "CRVAL3" in hdr
        and "CDELT3" in hdr and "CRPIX3" in hdr):
        dimz = hdr["NAXIS3"]
        nm_min = hdr["CRVAL3"]
        nm_step = hdr["CDELT3"]
        ref_point = hdr["CRPIX3"]
        return (np.arange(dimz) + ref_point - 1) * nm_step + nm_min
    else: return None

def main():

    data_type = np.float64

    if len(sys.argv) < 3: usage()

    try:
        opts, args = getopt.getopt(sys.argv[1:], "", [])
    except getopt.GetoptError, err:
        print str(err)
        usage()

    for opt, arg in opts:
        pass
    
    path = args[0]
    result_path = args[1]
    if os.path.exists(path):
        to = Tools()
        data, hdr = to.read_fits(path, return_header=True)
        data = data.astype(data_type)
        frames_vector = np.nansum(np.nansum(data, axis=0), axis=0)
        frames_vector[np.nonzero(np.isnan(frames_vector))] = 0.
        
        nonzeros_frames = np.nonzero(frames_vector)[0]
        data = data[:,:,nonzeros_frames[0]:nonzeros_frames[-1]+1]
        nm_axis = get_nm_axis(hdr)
        if nm_axis is not None:
            hdr["CRVAL3"] = nm_axis[nonzeros_frames[0]]
        to.write_fits(result_path, data, fits_header=hdr)
        
    else:
        print "FITS file does not exist"
       
if __name__ == "__main__":
    main()
