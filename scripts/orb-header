#!/usr/bin/env python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>
# File: orb-header

## Copyright (c) 2010-2015 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORB
##
## ORB is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORB is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORB.  If not, see <http://www.gnu.org/licenses/>.

#############################################
############ HEADER script ##################
#############################################

# This script helps the user to manipulate the header of a frame. 

import os, sys
import orb.core
from orb.core import Tools, HDFCube
import argparse
from argparse import ArgumentParser
import warnings


def main(args):
    
    warnings.filterwarnings(
                'ignore', message='Overwriting existing file.*',
                module='astropy.io.*')

    to = Tools(no_log=True)


    if os.path.isfile(args.fits_path):
        if (not 'fits' in args.fits_path) and (not 'hdf5' in args.fits_path):
            with open(args.fits_path, 'r') as f:
                fits_list = [filename for filename in f]
                fits_list = to.sort_image_list(fits_list, 'spiomm')
        else:
            fits_list = [args.fits_path]
            
        for fits_path in fits_list:

            if 'hdf5' in fits_path:
                cube = HDFCube(fits_path)
                if args.hdu_index + 1 > cube.dimz:
                    print ' > ERROR: given frame index is too high, file only contains {} frames'.format(cube.dimz)
                    sys.exit(2)
                file_type = 'hdf5'
                
            elif 'fits' in fits_path:
                hdulist = to.read_fits(fits_path, return_hdu_only=True,
                                       fix_header=False)
                if args.hdu_index + 1 > len(hdulist):
                    print ' > ERROR: given HDU index is too high, file only contains {} HDU'.format(len(hdulist))
                    hdulist.info()
                    sys.exit(2)
                    
                hdu = hdulist[args.hdu_index]
                file_type = 'fits'
                
            else:
                print ' > ERROR: bad formatted file. Must be a FITS or HDF5'
                sys.exit(2)
            
            if args.subparser_name == 'print':
                if file_type == 'fits':
                    print repr(hdu.header)
                if file_type == 'hdf5':
                    print repr(cube.get_frame_header(args.hdu_index))
                
            elif args.subparser_name == 'key':
                if file_type == 'fits':
                    if args.keyword in hdu.header:
                        print os.path.split(fits_path)[1].strip(), ' ', hdu.header[args.keyword]
                    else:
                        print ' > ERROR: keyword {} does not exist.'.format(
                            args.keyword)
                        sys.exit(2)
                        
                if file_type == 'hdf5':
                    if args.keyword in cube.get_frame_header(args.hdu_index):
                        print os.path.split(fits_path)[1].strip(), ' ', cube.get_frame_header(
                            args.hdu_index)[args.keyword]
                    else:
                        print ' > ERROR: keyword {} does not exist.'.format(
                            args.keyword)
                        sys.exit(2)
                        
            elif args.subparser_name == 'del':
                if file_type == 'fits':
                    if args.keyword in hdu.header:
                        del hdu.header[args.keyword]
                        hdulist.writeto(fits_path, clobber=True)
                    else:
                        print ' > ERROR: keyword {} does not exist.'.format(
                            args.keyword)
                        sys.exit(2)
                        
                if file_type == 'hdf5':
                    with to.open_hdf5(fits_path, 'a') as f:
                        hdr = cube.get_frame_header(args.hdu_index)
                        if args.keyword in hdr:
                            del hdr[args.keyword]
                            del f[to._get_hdf5_header_path(args.hdu_index)]
                            f[to._get_hdf5_header_path(args.hdu_index)] = (
                                to._header_fits2hdf5(hdr))
                        else:
                            print ' > ERROR: keyword {} does not exist.'.format(
                                args.keyword)
                            sys.exit(2)
                         
            elif args.subparser_name == 'info':
                hdulist.info()
        
    else:
        print " > ERROR: File {} does not exist.".format(args.fits_path)
       
if __name__ == "__main__":

    parser = ArgumentParser(version=('ORB-version {}'.format(
                              orb.core.__version__)),
                            description=
                            "Manipulate the header of a FITS/HDF5 file.")

    parser.add_argument('fits_path', help='Path to the FITS file')

    parser.add_argument('-i', dest="hdu_index", default=0, type=int,
                        help="Change HDU index")
    
    subparsers = parser.add_subparsers(help='operation type', dest='subparser_name')

    parser_print = subparsers.add_parser('print', help='Print header content')

    parser_key = subparsers.add_parser('key', help='Print key value')

    parser_key.add_argument('keyword', help='Keyword to print')

    parser_del = subparsers.add_parser('del', help='Delete keyword (Warning: File will be overwritten)')
    
    parser_del.add_argument('keyword', help='Keyword to delete')

    parser_del = subparsers.add_parser('info', help='Print basic header info')
    
    

    if len(sys.argv) < 2:
        parser.print_usage()
        sys.exit(2)
        
    args=parser.parse_args()
    
    main(args)
