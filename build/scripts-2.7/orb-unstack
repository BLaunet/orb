#!/home/thomas/.virtualenvs/orb/bin/python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca>
# File: orb-unstack

## Copyright (c) 2010-201 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORB
##
## ORB is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORB is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORB.  If not, see <http://www.gnu.org/licenses/>.

#############################################
############ UNSTACK script #################
#############################################

# This script helps the user to unstack a cube into a set of frames. A
# list of frames path must be given.

from orb.core import Tools
import sys, os

def usage(): 
    print """usage: orb-unstack CUBE_NAME.fits
    
    Convert a cube in a list of frames."""
  
    sys.exit(2)

def main():

    if len(sys.argv) < 2: usage()
    
    cube_name = sys.argv[1]
    if os.path.splitext(cube_name)[1] == '.fits': hdf5 = False
    elif os.path.splitext(cube_name)[1] == '.hdf5': hdf5 = True
    else: raise Exception("Unknown extension. Make sure that your file has a correct extension ('*.fits' or '*.hdf5' depending on its format.)")
        
    if os.path.exists(cube_name):
        if not hdf5:
            cube, hdr = Tools(no_log=True).read_fits(cube_name,
                                                     return_header=True)
        else:
            cube, hdr = Tools(no_log=True).read_hdf5(cube_name,
                                                     return_header=True)
        for iframe in range(cube.shape[2]):
            frame_path = (os.path.splitext(cube_name)[0]
                          + os.sep + 'frame_{:04d}'.format(iframe)) + '.fits'

            if not hdf5:
                Tools(no_log=True).write_fits(frame_path,
                                              cube[:,:,iframe],
                                              fits_header=hdr,
                                              overwrite=True)
            else:
                Tools(no_log=True).write_hdf5(frame_path,
                                              cube[:,:,iframe],
                                              header=hdr,
                                              overwrite=True)
    else:
        print "File does not exist"
       
if __name__ == "__main__":
    main()
